{"version":3,"sources":["actions/constants.js","components/Header/index.js","actions/auth.actions.js","components/Layout/index.js","containers/HomePage/index.js","actions/user.actions.js","components/UI/Card/index.js","containers/LoginPage/index.js","containers/RegisterPage/index.js","components/PrivateRoute.js","App.js","serviceWorker.js","reducer/auth.reducer.js","reducer/user.reducer.js","reducer/index.js","store/index.js","index.js"],"names":["authConstant","userConstants","Header","props","auth","useSelector","state","dispatch","useDispatch","className","style","display","authenticated","to","margin","color","firstName","lastName","onClick","uid","a","type","firestore","collection","doc","update","isOnline","then","signOut","localStorage","clear","catch","error","console","log","payload","Layout","children","User","user","profileName","charAt","toUpperCase","flex","justifyContent","fontWeight","lastname","HomePage","unsubscribe","useState","chatStarted","setChatStarted","chatUser","setChatUser","message","setMessage","userUid","setUserUid","useEffect","db","onSnapshot","querySnapshot","users","forEach","data","push","f","initChat","where","uid_1","uid_2","orderBy","conversations","user_uid_1","user_uid_2","getRealtimeConversations","length","map","key","con","createdAt","textAlign","value","onChange","e","target","placeholder","msgObj","add","isView","Date","updateMessage","Card","LoginPage","email","setEmail","password","setPassword","onSubmit","preventDefault","signInWithEmailAndPassword","name","displayName","split","loggedInUser","setItem","JSON","stringify","alert","RegisterPage","setFirstName","setLastName","createUserWithEmailAndPassword","currentUser","updateProfile","set","signup","PrivateRoute","Component","component","rest","getItem","parse","App","path","exact","Boolean","window","location","hostname","match","initialState","authenticating","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d635b5c.chunk.js","sourcesContent":["export const authConstant = {\r\n    USER_LOGIN: 'USER_LOGIN',\r\n    USER_LOGOUT: 'USER_LOGOUT',\r\n}\r\n\r\nexport const userConstants = {\r\n    GET_REALTIME_USERS: 'GET_REALTIME_USERS',\r\n    GET_REALTIME_MESSAGES: 'GET_REALTIME_MESSAGES'\r\n}","import React from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport './style.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { logout } from '../../actions';\r\n\r\nconst Header = (props) => {\r\n\r\n    const auth = useSelector(state => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n    // const logout = () => {\r\n    //     dispatch(logout());\r\n    // }\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <div style={{ display: 'flex' }}>\r\n                <div className=\"logo\">Web Messenger</div>\r\n                {\r\n                    !auth.authenticated ?\r\n                        <ul className=\"leftMenu\">\r\n                            <li><NavLink to={'/login'}>Login</NavLink></li>\r\n                            <li><NavLink to={'/signup'}>Sign up</NavLink></li>\r\n                        </ul> : null\r\n                }\r\n\r\n            </div>\r\n            <div style={{ margin: '20px 0', color: '#fff' }}>{auth.authenticated ? `Hi ${auth.firstName} ${auth.lastName}` : ''}</div>\r\n            <ul className=\"menu\">\r\n\r\n                {\r\n                    auth.authenticated ?\r\n                        <li>\r\n                            <Link to={'#'} onClick={() => {\r\n                                dispatch(logout(auth.uid))\r\n                            }}>Logout</Link>\r\n                        </li> : null\r\n                }\r\n\r\n            </ul>\r\n        </header>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;\r\n","import { auth, firestore } from 'firebase';\r\nimport { authConstant } from './constants';\r\n\r\nexport const signup = (user) => {\r\n    return async (dispatch) => {\r\n        const db = firestore();\r\n\r\n        dispatch({ type: `${authConstant.USER_LOGIN}_REQUEST` });\r\n\r\n        auth()\r\n            .createUserWithEmailAndPassword(user.email, user.password)\r\n            .then(data => {\r\n                console.log(data);\r\n                const currentUser = auth().currentUser;\r\n                const name = `${user.firstName} ${user.lastName}`;\r\n                currentUser.updateProfile({\r\n                    displayName: name\r\n                })\r\n                    .then(() => {\r\n                        // if here means it's updated successfully\r\n                        db.collection('users')\r\n                            .doc(data.user.uid)\r\n                            .set({\r\n                                firstName: user.firstName,\r\n                                lastName: user.lastName,\r\n                                uid: data.user.uid,\r\n                                createdAt: new Date(),\r\n                                isOnline: true,\r\n                            })\r\n                            .then(() => {\r\n                                //successfull\r\n                                const loggedInUser = {\r\n                                    firstName: user.firstName,\r\n                                    lastName: user.lastName,\r\n                                    uid: data.user.uid,\r\n                                    email: user.email,\r\n                                }\r\n                                localStorage.setItem('user', JSON.stringify(loggedInUser));\r\n                                console.log(\"User logged in successfully....\");\r\n                                dispatch({\r\n                                    type: `${authConstant.USER_LOGIN}_SUCCESS`,\r\n                                    payload: { user: loggedInUser }\r\n                                })\r\n                            })\r\n                            .catch(error => {\r\n                                console.log(error);\r\n                                dispatch({\r\n                                    type: `${authConstant.USER_LOGIN}_FAILURE`,\r\n                                    payload: { error }\r\n                                });\r\n                            });\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n}\r\n\r\nexport const signin = (user) => {\r\n    return async dispatch => {\r\n        dispatch({ type: `${authConstant.USER_LOGIN}_REQUEST` });\r\n        auth()\r\n            .signInWithEmailAndPassword(user.email, user.password)\r\n            .then((data) => {\r\n                console.log(data);\r\n\r\n                const db = firestore();\r\n                db.collection('users')\r\n                    .doc(data.user.uid)\r\n                    .update({\r\n                        isOnline: true\r\n                    })\r\n                    .then(() => {\r\n                        const name = data.user.displayName.split(\" \");\r\n                        const firstName = name[0];\r\n                        const lastName = name[1];\r\n\r\n                        const loggedInUser = {\r\n                            firstName,\r\n                            lastName,\r\n                            uid: data.user.uid,\r\n                            email: data.user.email,\r\n                        }\r\n                        localStorage.setItem('user', JSON.stringify(loggedInUser));\r\n\r\n                        dispatch({\r\n                            type: `${authConstant.USER_LOGIN}_SUCCESS`,\r\n                            payload: { user: loggedInUser }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                    })\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                dispatch({\r\n                    type: `${authConstant.USER_LOGIN}_FAILURE`,\r\n                    payload: { error }\r\n                });\r\n            })\r\n    }\r\n}\r\n\r\nexport const isLoggedInUser = () => {\r\n    return async dispatch => {\r\n        const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\r\n\r\n        if (user) {\r\n            dispatch({\r\n                type: `${authConstant.USER_LOGIN}_SUCCESS`,\r\n                payload: { user }\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: `${authConstant.USER_LOGIN}_FAILURE`,\r\n                payload: { error: 'Login again please' }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = (uid) => {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: `${authConstant.USER_LOGOUT}_REQUEST`,\r\n        });\r\n\r\n        const db = firestore();\r\n        db.collection('users')\r\n            .doc(uid)\r\n            .update({\r\n                isOnline: false\r\n            })\r\n            .then(() => {\r\n                auth()\r\n                    .signOut()\r\n                    .then(() => {\r\n                        //success\r\n                        localStorage.clear();\r\n                        dispatch({ type: `${authConstant.USER_LOGOUT}_SUCCESS` });\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        dispatch({\r\n                            type: `${authConstant.USER_LOGOUT}_FAILURE`,\r\n                            payload: { error }\r\n                        });\r\n                    })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n        // now it lets user logout\r\n\r\n    }\r\n}","import React from 'react'\r\nimport Header from '../Header/index';\r\n\r\nconst Layout = (props) => {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './style.css';\r\nimport Layout from '../../components/Layout';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getRealtimeUsers, updateMessage, getRealtimeConversations } from '../../actions';\r\n\r\nconst User = (props) => {\r\n\r\n    const { user, onClick } = props;\r\n    let profileName = user.firstName.charAt(0).toUpperCase() + user.lastName.charAt(0).toUpperCase();\r\n    console.log(\"Profile Nme\", profileName);\r\n    return (\r\n        <div onClick={() => onClick(user)} className=\"displayName\">\r\n            <div className=\"displayPic\">\r\n                <h3>{profileName}</h3>\r\n            </div>\r\n            \r\n            <div style={{ display: 'flex', flex: 1, justifyContent: 'space-between', margin: '0 10px' }}>\r\n                <span style={{ fontWeight: 500 }}>{user.firstName} {user.lastname}</span>\r\n                <span className={user.isOnline ? `onlineStatus` : `onlineStatus off`}></span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst HomePage = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector(state => state.auth);\r\n    const user = useSelector(state => state.user);\r\n    const [chatStarted, setChatStarted] = useState(false);\r\n    const [chatUser, setChatUser] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [userUid, setUserUid] = useState(null);\r\n    let unsubscribe;\r\n\r\n    useEffect(() => {\r\n        unsubscribe = dispatch(getRealtimeUsers(auth.uid))\r\n            .then(unsubscribe => {\r\n                return unsubscribe;\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            unsubscribe.then(f => f()).catch(error => console.log(error));\r\n        }\r\n    }, []);\r\n\r\n    const initChat = (user) => {\r\n        setChatStarted(true);\r\n        setChatUser(`${user.firstName} ${user.lastName}`)\r\n        setUserUid(user.uid);\r\n        console.log(user);\r\n        dispatch(getRealtimeConversations({ uid_1: auth.uid, uid_2: user.uid }));\r\n    }\r\n\r\n    const submitMessage = () => {\r\n        const msgObj = {\r\n            user_uid_1: auth.uid,\r\n            user_uid_2: userUid,\r\n            message\r\n        }\r\n\r\n        if (message !== '') {\r\n            dispatch(updateMessage(msgObj))\r\n                .then(() => {\r\n                    setMessage('')\r\n                });\r\n        }\r\n        // console.log(msgObj);\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <section className=\"container\">\r\n                <div className=\"listOfUsers\">\r\n\r\n                    {\r\n                        user.users.length > 0 ?\r\n                            user.users.map(user => {\r\n                                return (\r\n                                    <User onClick={initChat} key={user.uid} user={user} />\r\n                                );\r\n                            }) : null\r\n                    }\r\n\r\n\r\n                </div>\r\n\r\n                <div className=\"chatArea\">\r\n\r\n                    <div className=\"chatHeader\">\r\n                        {\r\n                            chatStarted ? chatUser : ''\r\n                        }\r\n                    </div>\r\n                    <div className=\"messageSections\">\r\n                        {\r\n                            chatStarted ?\r\n                                user.conversations.map(con => <div key={con.createdAt} style={{ textAlign: con.user_uid_1 == auth.uid ? 'right' : 'left' }}>\r\n                                    <p className=\"messageStyle\" >{con.message}</p>\r\n                                </div>)\r\n                                : null\r\n                        }\r\n                    </div>\r\n                    {\r\n                        chatStarted ?\r\n                            <div className=\"chatControls\">\r\n                                <textarea\r\n                                    value={message}\r\n                                    onChange={(e) => setMessage(e.target.value)}\r\n                                    placeholder=\"Write message\"\r\n                                />\r\n                                <button onClick={submitMessage}>Send</button>\r\n                            </div> : null\r\n                    }\r\n\r\n                </div>\r\n\r\n            </section>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import { userConstants } from \"./constants\";\r\nimport { firestore } from 'firebase';\r\n\r\nexport const getRealtimeUsers = (uid) => {\r\n\r\n    //console.log('uid', uid)\r\n\r\n    return async (dispatch) => {\r\n\r\n        dispatch({ type: `${userConstants.GET_REALTIME_USERS}_REQUEST` });\r\n\r\n        const db = firestore();\r\n        const unsubscribe = db.collection(\"users\")\r\n        //.where(\"uid\", \"!=\", uid)\r\n        .onSnapshot((querySnapshot) => {\r\n            const users = [];\r\n            querySnapshot.forEach(function(doc) {\r\n                if(doc.data().uid != uid){\r\n                    users.push(doc.data());\r\n                }\r\n            });\r\n            //console.log(users);\r\n\r\n            dispatch({ \r\n                type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\r\n                payload: { users }\r\n            });\r\n\r\n        });\r\n\r\n        return unsubscribe;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const updateMessage = (msgObj) => {\r\n    return async dispatch => {\r\n\r\n        const db = firestore();\r\n        db.collection('conversations')\r\n        .add({\r\n            ...msgObj,\r\n            isView: false,\r\n            createdAt: new Date()\r\n        })\r\n        .then((data) => {\r\n            console.log(data)\r\n           \r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport const getRealtimeConversations = (user) => {\r\n    return async dispatch => {\r\n\r\n        const db = firestore();\r\n        db.collection('conversations')\r\n        .where('user_uid_1', 'in', [user.uid_1, user.uid_2])\r\n        .orderBy('createdAt', 'asc')\r\n        .onSnapshot((querySnapshot) => {\r\n\r\n            const conversations = [];\r\n\r\n            querySnapshot.forEach(doc => {\r\n\r\n                if(\r\n                    (doc.data().user_uid_1 == user.uid_1 && doc.data().user_uid_2 == user.uid_2)\r\n                    || \r\n                    (doc.data().user_uid_1 == user.uid_2 && doc.data().user_uid_2 == user.uid_1)\r\n                ){\r\n                    conversations.push(doc.data())\r\n                }\r\n                \r\n            });\r\n\r\n            dispatch({\r\n                type: userConstants.GET_REALTIME_MESSAGES,\r\n                payload: { conversations }\r\n            })\r\n\r\n            console.log(conversations);\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"card\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { useState, useEffect } from 'react';\r\nimport Layout from '../../components/Layout/index';\r\nimport Card from '../../components/UI/Card/index';\r\n\r\nimport './style.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { signin, isLoggedInUser } from '../../actions/auth.actions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginPage = () => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector(state => state.auth)\r\n\r\n    // useEffect(() => {\r\n    //     if (!auth.authenticated) {\r\n    //         dispatch(isLoggedInUser())\r\n    //     }\r\n    // }, [])\r\n\r\n    const userLogin = (e) => {\r\n        e.preventDefault();\r\n        if (email == '') {\r\n            alert('Email is required');\r\n            return\r\n        }\r\n        if (password == '') {\r\n            alert('password is required');\r\n            return\r\n        }\r\n        dispatch(signin({ email, password }));\r\n\r\n    }\r\n\r\n    if (auth.authenticated) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n\r\n    return (\r\n        <Layout>\r\n            <div className=\"loginContainer\">\r\n                <Card>\r\n                    <form className=\"formStyling\" onSubmit={userLogin}>\r\n                        <input\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            placeholder=\"Email\"\r\n                        />\r\n                        <input\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            placeholder=\"Password\"\r\n                        />\r\n                        <div>\r\n                            <button>Login</button>\r\n                        </div>\r\n                    </form>\r\n                </Card>\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default LoginPage;","import React, { useState } from 'react';\r\nimport Layout from '../../components/Layout/index';\r\nimport Card from '../../components/UI/Card';\r\nimport { signup } from '../../actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst RegisterPage = (props) => {\r\n\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector(state => state.auth);\r\n\r\n    const registerUser = (e) => {\r\n        e.preventDefault();\r\n        const user = { firstName, lastName, email, password }\r\n        dispatch(signup(user))\r\n    }\r\n\r\n    if (auth.authenticated) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <div className=\"registerContainer\">\r\n                <Card>\r\n                    <form className=\"formStyling\" onSubmit={registerUser}>\r\n                        <h3>Sign up</h3>\r\n                        <input\r\n                            name=\"firstName\"\r\n                            type=\"text\"\r\n                            value={firstName}\r\n                            onChange={(e) => setFirstName(e.target.value)}\r\n                            placeholder=\"First Name\"\r\n                        />\r\n                        <input\r\n                            name=\"lastName\"\r\n                            type=\"text\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            placeholder=\"Last Name\"\r\n                        />\r\n                        <input\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            placeholder=\"Email\"\r\n                        />\r\n                        <input\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            placeholder=\"Password\"\r\n                        />\r\n\r\n                        <div>\r\n                            <button>Sign up</button>\r\n                        </div>\r\n\r\n                    </form>\r\n                </Card>\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default RegisterPage;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    return (\r\n        <div>\r\n            <Route {...rest} component={(props) => {\r\n                const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\r\n\r\n                if (user) {\r\n                    return <Component {...props} />\r\n                } else {\r\n                    return <Redirect to={'/login'} />\r\n                }\r\n            }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport HomePage from './containers/HomePage/index';\nimport LoginPage from './containers/LoginPage/index';\nimport RegisterPage from './containers/RegisterPage/index';\nimport PrivateRoute from './components/PrivateRoute';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isLoggedInUser } from './actions';\n\nfunction App() {\n\n  const auth = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!auth.authenticated) {\n      dispatch(isLoggedInUser())\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* only logged in user can access this home route */}\n        <PrivateRoute path=\"/\" exact component={HomePage} />\n\n        <Route path=\"/login\" component={LoginPage} />\n        <Route path=\"/signup\" component={RegisterPage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { authConstant } from \"../actions/constants\"\r\n\r\nconst initialState = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    authenticating: false,\r\n    authenticated: false,\r\n    error: null\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case `${authConstant.USER_LOGIN}_REQUEST`:\r\n            state = {\r\n                ...state,\r\n                authenticating: true\r\n            }\r\n            break;\r\n        case `${authConstant.USER_LOGIN}_SUCCESS`:\r\n            state = {\r\n                ...state,\r\n                ...action.payload.user,\r\n                authenticated: true,\r\n                authenticating: false\r\n            }\r\n            break;\r\n        case `${authConstant.USER_LOGIN}_FAILURE`:\r\n            state = {\r\n                ...state,\r\n                authenticated: false,\r\n                authenticating: false,\r\n                error: action.payload.error,\r\n            }\r\n            break;\r\n        case `${authConstant.USER_LOGOUT}_REQUEST`:\r\n            break;\r\n        case `${authConstant.USER_LOGOUT}_SUCCESS`:\r\n            state = {\r\n                ...initialState\r\n            }\r\n            break;\r\n        case `${authConstant.USER_LOGOUT}_FAILURE`:\r\n            state = {\r\n                ...state,\r\n                error: action.payload.error\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}","import { userConstants } from \"../actions/constants\"\r\n\r\nconst initialState = {\r\n    users: [],\r\n    conversations: [],\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case `${userConstants.GET_REALTIME_USERS}_REQUEST`:\r\n            break;\r\n        case `${userConstants.GET_REALTIME_USERS}_SUCCESS`:\r\n            state = {\r\n                ...state,\r\n                users: action.payload.users\r\n            }\r\n            break;\r\n        case userConstants.GET_REALTIME_MESSAGES:\r\n            state = {\r\n                ...state,\r\n                conversations: action.payload.conversations\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}","import { combineReducers } from \"redux\";\r\nimport authReducer from './auth.reducer';\r\nimport userReducer from './user.reducer';\r\n \r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    user: userReducer,\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport rootReducer from '../reducer/index';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDIn6GItBUCNT6NfCASDGdFhkTPDkmmcJY\",\n  authDomain: \"web-messenger-6544c.firebaseapp.com\",\n  databaseURL: \"https://web-messenger-6544c.firebaseio.com\",\n  projectId: \"web-messenger-6544c\",\n  storageBucket: \"web-messenger-6544c.appspot.com\",\n  messagingSenderId: \"35938167777\",\n  appId: \"1:35938167777:web:62ea7a531921da559400a0\",\n  measurementId: \"G-4KVD17ZP03\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nwindow.store = store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}